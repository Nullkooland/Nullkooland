@inject IThemeService ThemeService
@inject ImageDialogViewModel ViewModel

<style>
    .img-view-dialog {
        position: relative;
        height: fit-content;
        width: fit-content;
        overflow: hidden;
    }

        .img-view-dialog > img {
            max-height: 96vh;
            max-width: 96vw;
            object-fit: contain;
            object-position: center;
        }

        .img-view-dialog > div {
            position: absolute;
            top: 0px;
            height: 2.5rem;
            width: 100%;
            background-color: @ThemeService.Colors.BackgroundGrey.SetAlpha(0.3);
            backdrop-filter: blur(4px);
            -webkit-backdrop-filter: blur(4px);
            box-shadow: 0px 1px 4px rgba(0, 0, 0, 0.2);
        }
</style>

<div class="d-flex pa-0 rounded img-view-dialog">

    <img src="@Source"
         alt="@Caption" />

    <div class="d-flex flex-row align-center">
        <MudIcon Class="ml-2" Icon="@Icons.Material.Rounded.Image" Size="Size.Small"/>
        <MudText Class="ml-2 mr-auto">
            @Caption
        </MudText>
        <MudIconButton Class="mr-2"
                       Icon="@Icons.Material.Filled.Close"
                       Color="Color.Inherit"
                       Size="Size.Small"
                       OnClick="OnClose" />
    </div>
</div>

@code {
    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public string? Source { get; set; }

    [Parameter]
    public string? Caption { get; set; }

    [Parameter]
    public string? Description { get; set; }

    void OnClose() => MudDialog!.Close(DialogResult.Ok(true));

    protected override void OnInitialized()
    {
        ThemeService.ThemeChanged += (_, themeType) => StateHasChanged();
    }
}
